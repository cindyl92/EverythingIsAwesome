
Component/Unit Testing:

The automated unit tests in this project can be found under Assets->Tests

The remainder of the text files in this folder are sample text files we used to manually test our various components.

In the test folder, there are two unit test files: JSONParserTests.cs and BuildingHeightsTests.cs

JSONParserTests.cs is a Unity Unit Test file that tests the methods in the JSONParser.cs class. This corresponds to the Japarser and Translating Architect components in our diagram

BuildingHeightsTests.cs is a Unity Unit Test file that tests the methods in the BuildingHeights.cs class. This is our visualizer component that renders the buildings into the Unity Scene. 

Please note that these Unit Tests were written with the Unity Test Tools Framework, which is a separate download inside the Unity Asset Store. Due to the size of the framework, it was not added to the git repo, but you would need to download it in order for the tests to run properly.

The CustomParser.cs (which is called from JSONParser) and Decomposer.js (which is called from the Starter.cs) corresponds to their respective components in the architecture. Since they deal with file i/o, we will describe the manual testing process below:

CustomParser Testing Script:

1. Copy the code in customParserText.txt into Visual Studio and remove the AssemblyCSharpvs namespace.
2. Add a main function and instantiate a new CustomParser with a filepath to a test file, e.g. "C:\Users\Kevin\Desktop\customParserTest.txt". The test file simulates the text file generated by the Repository Decomposer.
3. Call getArrayLOC and getArrayCommentDensity on the instance of CustomParser and store the result to two integer arrays.
4. Using customParserTest.txt, the first two indices of the array of lines of code should be 18 and 19. The first two indices of the array of comment densities should be 31 and 34.

Decomposer Testing Script:

To test the Decomposer.js, we used a test repo containing java files (and some non java files). This requires the installation of the Unity software.

1. Open the project in Unity, and run the application.
2. Input **jonathankwok/AwesomeJavaRepository** when prompted in the application. The process is complete when the console says "WRITING END".
3. Open up the project folder in a file explorer, and open the Temp/ folder. Inside should be two files: javaPaths.txt, and javaCode.txt. 
4. Verify that the files look exactly like this:


javaPaths.txt:
    https://github.com/jonathankwok/AwesomeJavaRepository/blob/master/src/package1/Class1.java
    https://github.com/jonathankwok/AwesomeJavaRepository/blob/master/src/package1/Class2.java
    https://github.com/jonathankwok/AwesomeJavaRepository/blob/master/src/package2/Class3.java
    https://github.com/jonathankwok/AwesomeJavaRepository/blob/master/src/package3/Class4.java

javaCode.txt
    package package1;

    public class Class1 {

      public static void main(String[] args) {
        // TODO Auto-generated method stub

      }

    }

    @#$
    package package1;

    public class Class2 {

    }

    @#$
    package package2;

    public class Class3 {

    }

    @#$
    package package3;

    public class Class4 {

    }

    @#$


Integration Testing:

To test the integration of JSONParser and CustomParser:
In the Start() method of JSONParser, run the following code:

string[,] mockAllResults = this.getAllResults ("mockFilePaths.txt", "mockJavaCode.txt");

for (int i = 0; i< mockAllResults.GetLength(0); i++){
				
	Debug.Log ("RESULTS FOR CLASS: " + mockAllResults[i,0]);
	Debug.Log ("most coupled class is: " + mockAllResults[i,1]);
	Debug.Log ("number of instances: " + mockAllResults[i,2]);
	Debug.Log ("lines of code: " + mockAllResults[i,3]);
	Debug.Log ("comment density: " + mockAllResults[i,4]);
	Debug.Log ("package: " + mockAllResults[i,5]);				
}

The mockAllResults should integrate the results of the JSONParser with the results from the CustomParser. The lines that print lines of code and comment density should match that of the actual code its parsing.

To test it with other files, simply change the parameters in getAllResults with the text file of your choice as long as it conforms to they layout shown in our Test Repository: https://github.com/jonathankwok/AwesomeJavaRepository 


To test the integration of the JSONParser and the BuildingHeights (visualizer):

In the Start() method of BuildingHeights.cs add the following code:

JSONParser parser = new JSONParser();
javaClasses = parser.getAllResults(“mockFilePaths.txt", “mockJavaCode.txt");

Like before, you can change the code bases by changing the names of the text files.
To visualize our Robotium Repository, use:"roboFilePaths.txt", "roboCode.txt"
For the JamsMusicPlayer Repository, use: "javaPaths.txt", "javaText.txt"

The classes will appear in the Main.unity window as buildings and the coupling (from JSONParser) will be represented as yellow/red lines between them. The heights of the buildings will be based on the lines of code and the colours will be based on the comment density (from Custom Parser).


To test the integration of the Decomposer with the rest of the project:

Run the main unity file and then enter the name of a Github repository in the field. 
The decomposer will then run and all the files in the repo should appear in the debug console. 
The text files with the file paths and code for the code base will appear in the Temp folder in the project.


